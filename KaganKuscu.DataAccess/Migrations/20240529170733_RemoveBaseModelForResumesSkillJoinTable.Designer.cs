// <auto-generated />
using System;
using KaganKuscu.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaganKuscu.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240529170733_RemoveBaseModelForResumesSkillJoinTable")]
    partial class RemoveBaseModelForResumesSkillJoinTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KaganKuscu.Model.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "027b84d6-6870-4403-bfc7-02b3222ad20f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmIOs+VbfTlHb4VIXaJ3rYjfnanj+IQRa62QFdNmftMqWrzG8DeRikHmZjZYMfLRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff80d053-a6d3-4c84-9113-b81e2dc21ab0",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "591df74d-ecd2-4259-a3d3-1deaff804924",
                            Email = "kuscukagan@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUSCUKAGAN@GMAIL.COM",
                            NormalizedUserName = "KAGANKUSCU",
                            PasswordHash = "AQAAAAIAAYagAAAAEMYyPfNbUZvmdgFfwXi+gCwVmAon3WKnqp/tCF2JRlSmCkn141LRU4BtNEsbQLzeuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a984b2e-4782-46cc-b9df-6d8de54d07ba",
                            TwoFactorEnabled = false,
                            UserName = "kagankuscu"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7030),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7080),
                            Description = "",
                            EndDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("3a1a775d-2555-42e2-8a0d-476b16459ac0"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İZMİT MESLEKİ VE TEKNİK ANADOLU LİSESİ",
                            ResumeId = 1,
                            Role = "Elektrik Teknisyeni",
                            StartDate = new DateTime(2012, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7100),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7100),
                            Description = "",
                            EndDate = new DateTime(2017, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("dfcfdd81-c6f0-4c21-a24f-9a6cfb4b3b9a"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "KOCAELİ ÜNİVERSİTESİ HEREKE YÜKSEK OKULU",
                            ResumeId = 1,
                            Role = "Elektrik Teknikeri",
                            StartDate = new DateTime(2015, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7100),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7110),
                            Description = "",
                            EndDate = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("e9ecbcc6-4616-478a-b44e-97b506272eb4"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Mekatronik Mühendisi",
                            StartDate = new DateTime(2017, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7110),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7110),
                            Description = "",
                            EndDate = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("7f9cc66e-f79c-43e7-9181-6e0f75ba476b"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Yüksek Lisans Mekatronik Mühendisi",
                            StartDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7120),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7120),
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("aaa42f5d-441f-4a5d-8880-443b3ec57031"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ACUNMEDYA AKADEMİ",
                            ResumeId = 1,
                            Role = ".Net Core Backend Developer",
                            StartDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7610),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(7610),
                            Guid = new Guid("2576ac15-8214-4329-b74d-92fce207016e"),
                            IconCssClass = "map-icon map-icon-bicycling",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bisiklet",
                            ResumeId = 1
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Başarısızlıktan korkma. Başarısızlık, başarıya giden yoldaki en önemli adımdır.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8020),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8020),
                            Guid = new Guid("73221a89-f3e7-4ac7-b1d7-0181455a7e37"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Bilgisayarlar, bisiklete binmek gibi bir şeydir. Dengeyi bir kez yakaladınız mı, düşmeniz çok zor.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8020),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8020),
                            Guid = new Guid("9034c0a6-0999-42e1-8ecf-be2f633744ad"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Yazılım, bir insanın zekasını en iyi şekilde yansıtan şeydir.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8030),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8030),
                            Guid = new Guid("0263ec82-d056-420e-b089-c9b893579b9d"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Gelecek, bugünü nasıl geçirdiğimize bağlıdır.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8030),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8030),
                            Guid = new Guid("2a140850-2b6b-4a8e-8688-04daa55f71de"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Dünyayı değiştirmek istiyorsan, önce kendini değiştirmelisin.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8040),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8040),
                            Guid = new Guid("7475f258-e7a4-44f6-bb3e-d38fdc13f610"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Teknolojinin kalbi insan ruhudur.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8040),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8040),
                            Guid = new Guid("447804de-305f-4a70-a907-dc84e5c31767"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Noktaları birleştirmek ancak geriye baktığınızda mümkündür.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8050),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8050),
                            Guid = new Guid("0bfeda0f-c591-4cc2-9387-06bddcda3b2d"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Zamanınız sınırlı, onu başkasının hayatını yaşayarak harcamayın.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8050),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8050),
                            Guid = new Guid("b02b8db6-1fda-4d94-b508-e3e3503c4157"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Harika işler yapmak için tutkulu olmanız gerekir.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8060),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8060),
                            Guid = new Guid("59486219-0d08-48ee-ba74-d61aba32fbdd"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Yaratıcı olmak, başkalarının ne düşündüğünü önemsememektir.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8060),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8060),
                            Guid = new Guid("162c4806-11cf-4034-9ce0-9fb587db9acb"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Hızlı hareket et ve bir şeyler yap. Mükemmellik, eylemin sonucudur.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8070),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8070),
                            Guid = new Guid("3bcea012-2e1d-49d5-a1e4-082f367c2898"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Mark Zuckerberg"
                        },
                        new
                        {
                            Id = 12,
                            Content = "Her zaman daha iyisini yapmanin bir yolu vardir.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8070),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8070),
                            Guid = new Guid("3c8fa407-c08b-409f-96ff-30b8709ee5c0"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Larry Page"
                        },
                        new
                        {
                            Id = 13,
                            Content = "Başarısızlık bir seçenek değildir. Pes edene kadar denemeye devam et.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8080),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8080),
                            Guid = new Guid("76017c9b-602e-4d6f-9eb2-844c74d384b6"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Elon Musk"
                        },
                        new
                        {
                            Id = 14,
                            Content = "Basitlik, karmaşıklığın en üst noktasıdır.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8080),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8080),
                            Guid = new Guid("d17aada8-628a-4b3f-ad24-65664dd66a9a"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Tim Cook"
                        },
                        new
                        {
                            Id = 15,
                            Content = "Teknolojinin iyilik için bir güç olduğuna inanıyorum.",
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8080),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8090),
                            Guid = new Guid("5cab1a66-b30c-482e-bbd1-9f74ac2f1641"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Satya Nadella"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "<p>Teknolojinin sunduğu sonsuz olasılıklar beni her zaman heyecanlandırmıştır. Yazılım geliştirme dünyasına adım atarak bu heyecanımı gerçeğe dönüştürme şansı yakaladım. .NET Core platformlarında backend web geliştirmeye olan ilgimi keşfettim ve bu alanlarda kendimi geliştirmeye başladım. C#, JavaScript ve MS SQL Server dillerini öğrenerek temellerimi sağlamlaştırmaya çalışıyorum.</p>\n\n                        <p>Meraklı ve araştırmacı ruhum sayesinde her gün yeni bir şeyler öğreniyor ve kendimi geliştirmeye devam ediyorum. Kod yazmak benim için sadece bir meslek değil, aynı zamanda bir tutku ve öğrenme fırsatı. Her projede kendimi geliştirmenin ve yeni bilgiler edinmenin heyecanını yaşıyorum.</p>\n\n                        <p>Problem çözme becerilerimi geliştirmeye ve analitik düşünme yeteneğimi güçlendirmeye odaklanıyorum. Karmaşık problemler karşısında yılmadan çözümler aramak ve en uygun çözümü bulmak için çabalıyorum.</p>\n\n                        <p>Ekip çalışmasına yatkın bir kişiliğe sahibim ve iletişim becerilerimi geliştirmeye önem veriyorum. Ekip arkadaşlarımla uyum içinde çalışarak ortak hedeflere ulaşmanın keyfini yaşıyorum.</p>",
                            Address = "Kocaeli/Izmit",
                            AppUserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            BirthDate = new DateTime(1996, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8480),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(8480),
                            Email = "kuscukagan@gmail.com",
                            FullName = "Kağan Kuşcu",
                            Guid = new Guid("4f422a12-a9b5-4cb7-8c1f-4d6ca2b9cf88"),
                            ImagePath = "img/resume/kagankuscu.jpg",
                            Interest = "<p>Bisiklet tutkunuyum. Rüzgarı yüzümde hissederek pedallara basmak, özgürlüğün ve maceranın tadını çıkarmak benim için paha biçilemez bir deneyim. Her sürüşte yeni keşiflere yelken açıyor, doğanın güzelliklerine tanık oluyorum. Bisikletimle şehirlerin karmaşasından uzaklaşıp, sakin patikalarda huzur buluyorum. Her viraj yeni bir sürprizi, her tepe yeni bir manzarayı müjdeliyor.\n                        <br />\n                        <br />\n                        Bisikletim sadece bir ulaşım aracı değil, aynı zamanda bir yaşam tarzı. Bisiklet kullanmak bana sadece sağlık ve zindelik değil, aynı zamanda çevreye karşı sorumluluk bilinci de kazandırıyor. Bisikletimle pedal çevirdikçe dünyayı daha güzel bir yer yapmak için katkıda bulunuyorum.\n                        <br />\n                        <br />\n                        Bisiklet tutkum beni her geçen gün daha da ileriye taşıyor. Kendimi geliştirmek için sürekli yeni rotalar arıyor, daha uzun mesafeler kat etmek için antrenman yapıyorum. Bisiklet üzerinde kendimi sınırlarımı zorlarken, aynı zamanda kendimi de daha iyi tanıyorum.\n                        <br />\n                        <br />\n                        Bisikletimle çıktığım her yolculuk unutulmaz bir anıya dönüşüyor. Pedallara her basışımda yeni bir hikaye yazıyorum. Bisiklet tutkum bana sadece keyif ve huzur değil, aynı zamanda unutulmaz anılar ve deneyimler de kazandırıyor.</p>",
                            IsActive = true,
                            IsDeleted = false,
                            Phone = "(551)-0973377",
                            ResumeName = "",
                            ResumePath = "Files/Resume/kagankuscu.pdf",
                            SecondPhone = "(089)-3006776",
                            Title = ".Net Backend Developer"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9660),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9670),
                            Guid = new Guid("0a2f290c-0c06-4e70-8d39-58d82eef179f"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asp.Net Core",
                            Percent = 80
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9680),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9680),
                            Guid = new Guid("922755c1-e6b1-43da-90c8-b89ffc3f6822"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "C#",
                            Percent = 75
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9690),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9690),
                            Guid = new Guid("1ae9fcbe-163f-481b-b0db-1eff8838312d"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Javascript",
                            Percent = 60
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9700),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9700),
                            Guid = new Guid("2af1a8ba-5b98-469b-9da7-8b493fca19b8"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MS SQL",
                            Percent = 72
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9700),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 776, DateTimeKind.Local).AddTicks(9700),
                            Guid = new Guid("66fd2d20-44fc-4ff0-bc56-fb3ab4490263"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTML & CSS",
                            Percent = 82
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(60),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(60),
                            Guid = new Guid("eae244a6-e1d2-4711-8c5a-d02243b88e9a"),
                            IconCssClass = "rsicon rsicon-github",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github",
                            ResumeId = 1,
                            Url = "https://github.com/kagankuscu"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(60),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(60),
                            Guid = new Guid("5e46c9e9-1b79-417d-ba75-f9288be4c67a"),
                            IconCssClass = "rsicon rsicon-linkedin",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn",
                            ResumeId = 1,
                            Url = "https://www.linkedin.com/in/kagan-kuscu/"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(70),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(70),
                            Guid = new Guid("69143dbb-fb09-4115-9bce-01f4921a8ba5"),
                            IconCssClass = "rsicon rsicon-instagram",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram",
                            ResumeId = 1,
                            Url = "https://www.instagram.com/kagan_kuscu/"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(410),
                            DateModified = new DateTime(2024, 5, 29, 20, 7, 32, 777, DateTimeKind.Local).AddTicks(420),
                            Description = ".Net Backend Developer",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("5bbd6467-e6d1-4956-ace2-55d0ff01aa0e"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Deadline Bilişim",
                            ResumeId = 1,
                            Role = ".Net Backend Developer",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumeSkill", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeSkill");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SkillId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 3
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 4
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A34A825F-E1A6-427C-8194-0D051C22560F",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40A649CC-F41A-4505-94B6-7335F12E3A5D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            RoleId = "A34A825F-E1A6-427C-8194-0D051C22560F"
                        },
                        new
                        {
                            UserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            RoleId = "40A649CC-F41A-4505-94B6-7335F12E3A5D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Interests")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Photos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("References")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumeSkill", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Skill", "Skill")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Interests");

                    b.Navigation("References");

                    b.Navigation("ResumesSkills");

                    b.Navigation("SocialMedias");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Navigation("ResumesSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
