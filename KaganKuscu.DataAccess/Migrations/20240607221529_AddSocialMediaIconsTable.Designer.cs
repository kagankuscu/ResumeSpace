// <auto-generated />
using System;
using KaganKuscu.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaganKuscu.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240607221529_AddSocialMediaIconsTable")]
    partial class AddSocialMediaIconsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KaganKuscu.Model.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e922f3c-0adc-4e67-832a-a124b5c79a20",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFCR/rFqHTuGpWkrbK7xPjbDbnOToJkAkU+p7OdMD9bEv4wI9luMht/VeBYT5tZEIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eeba4ca1-5621-4bf0-82ca-0c04cb78c54b",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e94ad48d-2ae3-4cac-8218-e4b0d33e8ea0",
                            Email = "kuscukagan@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUSCUKAGAN@GMAIL.COM",
                            NormalizedUserName = "KAGANKUSCU",
                            PasswordHash = "AQAAAAIAAYagAAAAELIjAIcEpI+j5PzCJ/pwsZQ/NGUstxN6VM87/FkRVAbC2gWxzTjWWo2H0C0cKFsOEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1793c29-cb98-4ea2-962d-cc5d6989d022",
                            TwoFactorEnabled = false,
                            UserName = "kagankuscu"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5680),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5720),
                            Description = "",
                            EndDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("9ee6802a-18e0-4625-b1d0-5d184b55bc8d"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İZMİT MESLEKİ VE TEKNİK ANADOLU LİSESİ",
                            Role = "Elektrik Teknisyeni",
                            StartDate = new DateTime(2012, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5740),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5740),
                            Description = "",
                            EndDate = new DateTime(2017, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("92844ecc-82ff-4c09-8f3e-b5114a6cf9f4"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "KOCAELİ ÜNİVERSİTESİ HEREKE YÜKSEK OKULU",
                            Role = "Elektrik Teknikeri",
                            StartDate = new DateTime(2015, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5750),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5750),
                            Description = "",
                            EndDate = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("611f57ed-8706-4e99-8865-b9b119eea765"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            Role = "Mekatronik Mühendisi",
                            StartDate = new DateTime(2017, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5760),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5760),
                            Description = "",
                            EndDate = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("62d6e2f1-c8d1-455a-bd49-8fd12a890cbb"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            Role = "Yüksek Lisans Mekatronik Mühendisi",
                            StartDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5760),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(5760),
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("f7cc085a-708c-4a71-9785-98346bf482f4"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ACUNMEDYA AKADEMİ",
                            Role = ".Net Core Backend Developer",
                            StartDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6240),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6240),
                            Guid = new Guid("1a56a4c8-6a7f-4f7f-94df-c1a19ec17c47"),
                            IconCssClass = "map-icon map-icon-bicycling",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bisiklet",
                            ResumeId = 1
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Başarısızlıktan korkma. Başarısızlık, başarıya giden yoldaki en önemli adımdır.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6670),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6680),
                            Guid = new Guid("3bf20c3b-87db-4b03-aa4b-66500b4dfdb6"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Bilgisayarlar, bisiklete binmek gibi bir şeydir. Dengeyi bir kez yakaladınız mı, düşmeniz çok zor.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6680),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6680),
                            Guid = new Guid("9ad1ae16-292e-4035-bcb6-5bb424cc7437"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Yazılım, bir insanın zekasını en iyi şekilde yansıtan şeydir.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6690),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6690),
                            Guid = new Guid("4eb8e1f7-004c-422b-a0aa-797db7ba1426"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Gelecek, bugünü nasıl geçirdiğimize bağlıdır.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6690),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6690),
                            Guid = new Guid("5391ed1b-1900-410b-a48d-1f391b7dc375"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Dünyayı değiştirmek istiyorsan, önce kendini değiştirmelisin.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6700),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6700),
                            Guid = new Guid("383e54f7-46ce-41ea-9163-06ef59080728"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Teknolojinin kalbi insan ruhudur.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6700),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6700),
                            Guid = new Guid("e51dc898-d1cc-4baf-b0a4-dbd64ae19ce3"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Noktaları birleştirmek ancak geriye baktığınızda mümkündür.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6710),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6710),
                            Guid = new Guid("0b04b08b-33ce-4a81-866c-351879e80942"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Zamanınız sınırlı, onu başkasının hayatını yaşayarak harcamayın.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6710),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6710),
                            Guid = new Guid("aa2f4705-e855-4c56-a8db-dcdc2dfd2cbd"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Harika işler yapmak için tutkulu olmanız gerekir.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6720),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6720),
                            Guid = new Guid("c1642267-22b3-4bbe-a574-0189fae491d4"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Yaratıcı olmak, başkalarının ne düşündüğünü önemsememektir.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6720),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6720),
                            Guid = new Guid("03a1d674-fdfa-40cb-b3a1-8f46f44dbf5f"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Hızlı hareket et ve bir şeyler yap. Mükemmellik, eylemin sonucudur.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6730),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6730),
                            Guid = new Guid("4fcf40fc-4797-4fc9-853f-ce07df107722"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Mark Zuckerberg"
                        },
                        new
                        {
                            Id = 12,
                            Content = "Her zaman daha iyisini yapmanin bir yolu vardir.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6730),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6730),
                            Guid = new Guid("01a4392f-e787-4ee4-bbfb-dca028557495"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Larry Page"
                        },
                        new
                        {
                            Id = 13,
                            Content = "Başarısızlık bir seçenek değildir. Pes edene kadar denemeye devam et.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6730),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6740),
                            Guid = new Guid("866bd7c2-8e05-4c1c-9dd6-c267227dc2f1"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Elon Musk"
                        },
                        new
                        {
                            Id = 14,
                            Content = "Basitlik, karmaşıklığın en üst noktasıdır.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6740),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6740),
                            Guid = new Guid("742ee6cf-ed40-4847-8cb5-ef953931cc8e"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Tim Cook"
                        },
                        new
                        {
                            Id = 15,
                            Content = "Teknolojinin iyilik için bir güç olduğuna inanıyorum.",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6750),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(6750),
                            Guid = new Guid("652b8163-30be-4736-8722-42d5d99e9d1d"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Satya Nadella"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "<p>Teknolojinin sunduğu sonsuz olasılıklar beni her zaman heyecanlandırmıştır. Yazılım geliştirme dünyasına adım atarak bu heyecanımı gerçeğe dönüştürme şansı yakaladım. .NET Core platformlarında backend web geliştirmeye olan ilgimi keşfettim ve bu alanlarda kendimi geliştirmeye başladım. C#, JavaScript ve MS SQL Server dillerini öğrenerek temellerimi sağlamlaştırmaya çalışıyorum.</p>\n\n                        <p>Meraklı ve araştırmacı ruhum sayesinde her gün yeni bir şeyler öğreniyor ve kendimi geliştirmeye devam ediyorum. Kod yazmak benim için sadece bir meslek değil, aynı zamanda bir tutku ve öğrenme fırsatı. Her projede kendimi geliştirmenin ve yeni bilgiler edinmenin heyecanını yaşıyorum.</p>\n\n                        <p>Problem çözme becerilerimi geliştirmeye ve analitik düşünme yeteneğimi güçlendirmeye odaklanıyorum. Karmaşık problemler karşısında yılmadan çözümler aramak ve en uygun çözümü bulmak için çabalıyorum.</p>\n\n                        <p>Ekip çalışmasına yatkın bir kişiliğe sahibim ve iletişim becerilerimi geliştirmeye önem veriyorum. Ekip arkadaşlarımla uyum içinde çalışarak ortak hedeflere ulaşmanın keyfini yaşıyorum.</p>",
                            Address = "Kocaeli/Izmit",
                            AppUserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            BirthDate = new DateTime(1996, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(7160),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(7160),
                            Email = "kuscukagan@gmail.com",
                            FullName = "Kağan Kuşcu",
                            Guid = new Guid("ba3ff775-2952-411b-a867-43d9740d526b"),
                            ImagePath = "img/resume/kagankuscu.jpg",
                            Interest = "<p>Bisiklet tutkunuyum. Rüzgarı yüzümde hissederek pedallara basmak, özgürlüğün ve maceranın tadını çıkarmak benim için paha biçilemez bir deneyim. Her sürüşte yeni keşiflere yelken açıyor, doğanın güzelliklerine tanık oluyorum. Bisikletimle şehirlerin karmaşasından uzaklaşıp, sakin patikalarda huzur buluyorum. Her viraj yeni bir sürprizi, her tepe yeni bir manzarayı müjdeliyor.\n                        <br />\n                        <br />\n                        Bisikletim sadece bir ulaşım aracı değil, aynı zamanda bir yaşam tarzı. Bisiklet kullanmak bana sadece sağlık ve zindelik değil, aynı zamanda çevreye karşı sorumluluk bilinci de kazandırıyor. Bisikletimle pedal çevirdikçe dünyayı daha güzel bir yer yapmak için katkıda bulunuyorum.\n                        <br />\n                        <br />\n                        Bisiklet tutkum beni her geçen gün daha da ileriye taşıyor. Kendimi geliştirmek için sürekli yeni rotalar arıyor, daha uzun mesafeler kat etmek için antrenman yapıyorum. Bisiklet üzerinde kendimi sınırlarımı zorlarken, aynı zamanda kendimi de daha iyi tanıyorum.\n                        <br />\n                        <br />\n                        Bisikletimle çıktığım her yolculuk unutulmaz bir anıya dönüşüyor. Pedallara her basışımda yeni bir hikaye yazıyorum. Bisiklet tutkum bana sadece keyif ve huzur değil, aynı zamanda unutulmaz anılar ve deneyimler de kazandırıyor.</p>",
                            IsActive = true,
                            IsDeleted = false,
                            Phone = "(551)-0973377",
                            ResumeName = "",
                            ResumePath = "Files/Resume/kagankuscu.pdf",
                            SecondPhone = "(089)-3006776",
                            Title = ".Net Backend Developer"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9490),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9490),
                            Guid = new Guid("685bdf07-ec2d-423d-a59b-4a7b27dc7ce3"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asp.Net Core",
                            Percent = 80
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9500),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9500),
                            Guid = new Guid("a4779f99-5fcd-4585-b435-90704333973f"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "C#",
                            Percent = 75
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9500),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9500),
                            Guid = new Guid("b0efdf62-1292-4db1-ab32-903b77443b2c"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Javascript",
                            Percent = 60
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9510),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9510),
                            Guid = new Guid("86629e2b-0f9d-47f0-ab36-4043e437fc64"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MS SQL",
                            Percent = 72
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9510),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9520),
                            Guid = new Guid("d21d2702-f533-4ad9-a3f1-899bad3768f6"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTML & CSS",
                            Percent = 82
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SocialMediaIconId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaIconId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9890),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9900),
                            Guid = new Guid("5e8cdb7e-c64e-4498-959c-6d3447547b30"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github",
                            SocialMediaIconId = 1,
                            Url = "https://github.com/kagankuscu"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9900),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9900),
                            Guid = new Guid("04572fa5-bdb4-4a7f-b299-29ccd1c98f0d"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn",
                            SocialMediaIconId = 2,
                            Url = "https://www.linkedin.com/in/kagan-kuscu/"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9910),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 406, DateTimeKind.Local).AddTicks(9910),
                            Guid = new Guid("3d66e410-6b77-4d5e-9020-de09af6947c0"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram",
                            SocialMediaIconId = 3,
                            Url = "https://www.instagram.com/kagan_kuscu/"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMediaIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaIcons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CssClass = "rsicon rsicon-github",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(280),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(280),
                            Guid = new Guid("2298f162-2aea-40d6-a681-e1d0480322db"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github"
                        },
                        new
                        {
                            Id = 2,
                            CssClass = "rsicon rsicon-linkedin",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(280),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(280),
                            Guid = new Guid("6b061abf-581b-4324-81f8-e04f7a9c9dc0"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = 3,
                            CssClass = "rsicon rsicon-instagram",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(290),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(290),
                            Guid = new Guid("675a7197-de16-495f-b591-3ddf77d87c95"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = 4,
                            CssClass = "rsicon rsicon-facebook",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(290),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(290),
                            Guid = new Guid("502a78df-8ac0-4a8d-b839-6b02cc7105bc"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 5,
                            CssClass = "rsicon rsicon-youtube",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(300),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(300),
                            Guid = new Guid("6a235ff6-db7a-418a-b275-f2096d0bc626"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Youtube"
                        },
                        new
                        {
                            Id = 6,
                            CssClass = "rsicon rsicon-twitter",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(300),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(300),
                            Guid = new Guid("58d73de6-fc11-4456-bbc0-897afa8e09fc"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "X (Twitter)"
                        },
                        new
                        {
                            Id = 7,
                            CssClass = "rsicon rsicon-slack",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(310),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(310),
                            Guid = new Guid("0d792daa-53e3-4123-b144-bc06f49ece9e"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Slack"
                        },
                        new
                        {
                            Id = 8,
                            CssClass = "rsicon rsicon-reddit",
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(310),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(310),
                            Guid = new Guid("c73c86b2-f752-401c-9d9f-3bbe72bffddc"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Reddit"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(670),
                            DateModified = new DateTime(2024, 6, 8, 1, 15, 29, 407, DateTimeKind.Local).AddTicks(680),
                            Description = ".Net Backend Developer",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("ebd20cfb-5db6-49fc-a16f-41c107052a03"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Deadline Bilişim",
                            Role = ".Net Backend Developer",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumeSkill", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeSkill");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SkillId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 3
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 4
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 5
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesEducations", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("ResumesEducations");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            EducationId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 3
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 4
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 5
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesReferences", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ResumesReferences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesSocialMedias", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "SocialMediaId");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("ResumesSocialMedias");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 3
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesWorkExperiences", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "WorkExperienceId");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("ResumesWorkExperiences");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            WorkExperienceId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A34A825F-E1A6-427C-8194-0D051C22560F",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40A649CC-F41A-4505-94B6-7335F12E3A5D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            RoleId = "A34A825F-E1A6-427C-8194-0D051C22560F"
                        },
                        new
                        {
                            UserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            RoleId = "40A649CC-F41A-4505-94B6-7335F12E3A5D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Interests")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Photos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.SocialMediaIcon", "SocialMediaIcon")
                        .WithMany()
                        .HasForeignKey("SocialMediaIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaIcon");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumeSkill", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Skill", "Skill")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesEducations", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Education", "Education")
                        .WithMany("ResumesEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesEducations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesReferences", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Reference", "Reference")
                        .WithMany("ResumesReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesReferences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reference");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesSocialMedias", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSocialMedias")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.SocialMedia", "SocialMedia")
                        .WithMany("ResumesSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("KaganKuscu.Model.Rel.ResumesWorkExperiences", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesWorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.WorkExperience", "WorkExperience")
                        .WithMany("ResumesWorkExperiences")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.Navigation("ResumesEducations");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.Navigation("ResumesReferences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Navigation("Interests");

                    b.Navigation("ResumesEducations");

                    b.Navigation("ResumesReferences");

                    b.Navigation("ResumesSkills");

                    b.Navigation("ResumesSocialMedias");

                    b.Navigation("ResumesWorkExperiences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Navigation("ResumesSkills");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.Navigation("ResumesSocialMedias");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.Navigation("ResumesWorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
