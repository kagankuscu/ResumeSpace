// <auto-generated />
using System;
using KaganKuscu.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaganKuscu.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240526065350_AddResumeSkillJoinTable")]
    partial class AddResumeSkillJoinTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KaganKuscu.Model.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9e8e3bd-c60a-4ae7-b716-db9fd5c9fa40",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELT03uZLrkiexTodDYeBZlQ13GUgAAjGv81YRUak3rQSWv10QSgQTKwGG5/d5wVHcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40e483c0-840b-49b6-bb48-bc8a7ba3ebad",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ada8268-2fb0-4fdd-b076-101cb90b3474",
                            Email = "kuscukagan@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUSCUKAGAN@GMAIL.COM",
                            NormalizedUserName = "KAGANKUSCU",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkbzZRVmfw9F+YHDzyuLyuQLJ13H20uJlOC1jQT4IdO9mKrLeWPod6ZTn4cTflfww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e1d288e-edf5-46dd-b0ad-e781cc187335",
                            TwoFactorEnabled = false,
                            UserName = "kagankuscu"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9660),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9700),
                            Description = "",
                            EndDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("c7f07425-d30a-4618-ae32-13e07c91db6b"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İZMİT MESLEKİ VE TEKNİK ANADOLU LİSESİ",
                            ResumeId = 1,
                            Role = "Elektrik Teknisyeni",
                            StartDate = new DateTime(2012, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9710),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9720),
                            Description = "",
                            EndDate = new DateTime(2017, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("b9d2108d-0a0d-416c-a5fd-a1f8d3856f82"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "KOCAELİ ÜNİVERSİTESİ HEREKE YÜKSEK OKULU",
                            ResumeId = 1,
                            Role = "Elektrik Teknikeri",
                            StartDate = new DateTime(2015, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9720),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9720),
                            Description = "",
                            EndDate = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("f7d8fde4-0e54-4192-913e-c4d0c358e038"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Mekatronik Mühendisi",
                            StartDate = new DateTime(2017, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9730),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9730),
                            Description = "",
                            EndDate = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("60e75e4d-7620-459a-bf4d-e8a7df97ad30"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Yüksek Lisans Mekatronik Mühendisi",
                            StartDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9730),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 900, DateTimeKind.Local).AddTicks(9730),
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("9abb0c75-eb9f-4532-880c-822d774f992a"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ACUNMEDYA AKADEMİ",
                            ResumeId = 1,
                            Role = ".Net Core Backend Developer",
                            StartDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(160),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(160),
                            Guid = new Guid("256ca400-2eaf-47c8-a5a2-bbad82fc2cdd"),
                            IconCssClass = "map-icon map-icon-bicycling",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bisiklet",
                            ResumeId = 1
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Başarısızlıktan korkma. Başarısızlık, başarıya giden yoldaki en önemli adımdır.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(590),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(590),
                            Guid = new Guid("f8a50654-1d5a-49c5-8f5b-2c54797c556e"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Bilgisayarlar, bisiklete binmek gibi bir şeydir. Dengeyi bir kez yakaladınız mı, düşmeniz çok zor.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(590),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(600),
                            Guid = new Guid("96a37363-879a-446f-b722-583724152e29"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Yazılım, bir insanın zekasını en iyi şekilde yansıtan şeydir.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(600),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(600),
                            Guid = new Guid("ce10e25d-c6bd-4789-98b9-d04aa1d56c66"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Gelecek, bugünü nasıl geçirdiğimize bağlıdır.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(600),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(610),
                            Guid = new Guid("140e0f7e-4143-4187-81b8-8fcf667790a2"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Dünyayı değiştirmek istiyorsan, önce kendini değiştirmelisin.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(610),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(610),
                            Guid = new Guid("823f4645-23eb-4598-93ec-c88d65c4c321"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Teknolojinin kalbi insan ruhudur.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(610),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(610),
                            Guid = new Guid("9cc63543-2349-44a4-8993-5e63bcb903ae"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Noktaları birleştirmek ancak geriye baktığınızda mümkündür.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(620),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(620),
                            Guid = new Guid("02606f88-ba93-44a2-82ee-8357452512d2"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Zamanınız sınırlı, onu başkasının hayatını yaşayarak harcamayın.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(630),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(630),
                            Guid = new Guid("20a9054e-fe56-4787-8dcc-958ad02a5b65"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Harika işler yapmak için tutkulu olmanız gerekir.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(630),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(630),
                            Guid = new Guid("475532c4-da05-40ca-9a48-a42dd68f3254"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Yaratıcı olmak, başkalarının ne düşündüğünü önemsememektir.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(630),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(640),
                            Guid = new Guid("7fb853c3-5945-4b66-91ef-3d6bfe400dff"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Hızlı hareket et ve bir şeyler yap. Mükemmellik, eylemin sonucudur.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(640),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(640),
                            Guid = new Guid("35e0533f-dc5e-490a-b1c6-e4083fb27afc"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Mark Zuckerberg"
                        },
                        new
                        {
                            Id = 12,
                            Content = "Her zaman daha iyisini yapmanin bir yolu vardir.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(640),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(650),
                            Guid = new Guid("4a84315a-caf6-427a-aa5d-515ffefaea8c"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Larry Page"
                        },
                        new
                        {
                            Id = 13,
                            Content = "Başarısızlık bir seçenek değildir. Pes edene kadar denemeye devam et.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(650),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(650),
                            Guid = new Guid("fafd9982-251b-4d80-9cbd-43035ca09e0f"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Elon Musk"
                        },
                        new
                        {
                            Id = 14,
                            Content = "Basitlik, karmaşıklığın en üst noktasıdır.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(660),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(660),
                            Guid = new Guid("448ddfe3-0b3f-4cc8-96d6-5dbe373dae34"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Tim Cook"
                        },
                        new
                        {
                            Id = 15,
                            Content = "Teknolojinin iyilik için bir güç olduğuna inanıyorum.",
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(660),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(660),
                            Guid = new Guid("2b17544d-54de-4f7c-b675-6982bde9f92b"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Satya Nadella"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "<p>Teknolojinin sunduğu sonsuz olasılıklar beni her zaman heyecanlandırmıştır. Yazılım geliştirme dünyasına adım atarak bu heyecanımı gerçeğe dönüştürme şansı yakaladım. .NET Core platformlarında backend web geliştirmeye olan ilgimi keşfettim ve bu alanlarda kendimi geliştirmeye başladım. C#, JavaScript ve MS SQL Server dillerini öğrenerek temellerimi sağlamlaştırmaya çalışıyorum.</p>\n\n                        <p>Meraklı ve araştırmacı ruhum sayesinde her gün yeni bir şeyler öğreniyor ve kendimi geliştirmeye devam ediyorum. Kod yazmak benim için sadece bir meslek değil, aynı zamanda bir tutku ve öğrenme fırsatı. Her projede kendimi geliştirmenin ve yeni bilgiler edinmenin heyecanını yaşıyorum.</p>\n\n                        <p>Problem çözme becerilerimi geliştirmeye ve analitik düşünme yeteneğimi güçlendirmeye odaklanıyorum. Karmaşık problemler karşısında yılmadan çözümler aramak ve en uygun çözümü bulmak için çabalıyorum.</p>\n\n                        <p>Ekip çalışmasına yatkın bir kişiliğe sahibim ve iletişim becerilerimi geliştirmeye önem veriyorum. Ekip arkadaşlarımla uyum içinde çalışarak ortak hedeflere ulaşmanın keyfini yaşıyorum.</p>",
                            Address = "Kocaeli/Izmit",
                            AppUserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            BirthDate = new DateTime(1996, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1040),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1040),
                            Email = "kuscukagan@gmail.com",
                            FullName = "Kağan Kuşcu",
                            Guid = new Guid("3102603b-9ca7-4b58-839c-ff5e7e4dc1fb"),
                            ImagePath = "img/resume/kagankuscu.jpg",
                            Interest = "<p>Bisiklet tutkunuyum. Rüzgarı yüzümde hissederek pedallara basmak, özgürlüğün ve maceranın tadını çıkarmak benim için paha biçilemez bir deneyim. Her sürüşte yeni keşiflere yelken açıyor, doğanın güzelliklerine tanık oluyorum. Bisikletimle şehirlerin karmaşasından uzaklaşıp, sakin patikalarda huzur buluyorum. Her viraj yeni bir sürprizi, her tepe yeni bir manzarayı müjdeliyor.\n                        <br />\n                        <br />\n                        Bisikletim sadece bir ulaşım aracı değil, aynı zamanda bir yaşam tarzı. Bisiklet kullanmak bana sadece sağlık ve zindelik değil, aynı zamanda çevreye karşı sorumluluk bilinci de kazandırıyor. Bisikletimle pedal çevirdikçe dünyayı daha güzel bir yer yapmak için katkıda bulunuyorum.\n                        <br />\n                        <br />\n                        Bisiklet tutkum beni her geçen gün daha da ileriye taşıyor. Kendimi geliştirmek için sürekli yeni rotalar arıyor, daha uzun mesafeler kat etmek için antrenman yapıyorum. Bisiklet üzerinde kendimi sınırlarımı zorlarken, aynı zamanda kendimi de daha iyi tanıyorum.\n                        <br />\n                        <br />\n                        Bisikletimle çıktığım her yolculuk unutulmaz bir anıya dönüşüyor. Pedallara her basışımda yeni bir hikaye yazıyorum. Bisiklet tutkum bana sadece keyif ve huzur değil, aynı zamanda unutulmaz anılar ve deneyimler de kazandırıyor.</p>",
                            IsActive = true,
                            IsDeleted = false,
                            Phone = "(551)-0973377",
                            ResumeName = "",
                            ResumePath = "Files/Resume/kagankuscu.pdf",
                            SecondPhone = "(089)-3006776",
                            Title = ".Net Backend Developer"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.ResumeSkill", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ResumeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeSkill");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1770),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1780),
                            Guid = new Guid("e23cff12-aff7-4374-a8ec-466fed93cede"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asp.Net Core",
                            Percent = 80
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1790),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1790),
                            Guid = new Guid("89ce5d1a-fce5-41d2-b2ef-17f05a47c629"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "C#",
                            Percent = 75
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1800),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1800),
                            Guid = new Guid("6e99822f-9949-4ce8-a6a5-7e128fe782c7"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Javascript",
                            Percent = 60
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1800),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1800),
                            Guid = new Guid("98aec5ef-20be-440e-bbfa-3e49f9d35610"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MS SQL",
                            Percent = 72
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1810),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(1810),
                            Guid = new Guid("8219d7d9-d36e-4fd9-be0d-ddfd1f0e9ccf"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTML & CSS",
                            Percent = 82
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2180),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2180),
                            Guid = new Guid("46819a50-971f-44b4-bbf8-7b32931076a0"),
                            IconCssClass = "rsicon rsicon-github",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github",
                            ResumeId = 1,
                            Url = "https://github.com/kagankuscu"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2180),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2190),
                            Guid = new Guid("e48e3eac-4d38-40d7-bffc-4536fa289552"),
                            IconCssClass = "rsicon rsicon-linkedin",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn",
                            ResumeId = 1,
                            Url = "https://www.linkedin.com/in/kagan-kuscu/"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2190),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2190),
                            Guid = new Guid("8d0bd7ba-58c2-437e-a482-6a22a792cf5b"),
                            IconCssClass = "rsicon rsicon-instagram",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram",
                            ResumeId = 1,
                            Url = "https://www.instagram.com/kagan_kuscu/"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2550),
                            DateModified = new DateTime(2024, 5, 26, 9, 53, 49, 901, DateTimeKind.Local).AddTicks(2550),
                            Description = ".Net Backend Developer",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("316d2553-0441-4e72-accc-57294cc72032"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Deadline Bilişim",
                            ResumeId = 1,
                            Role = ".Net Backend Developer",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A34A825F-E1A6-427C-8194-0D051C22560F",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40A649CC-F41A-4505-94B6-7335F12E3A5D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            RoleId = "A34A825F-E1A6-427C-8194-0D051C22560F"
                        },
                        new
                        {
                            UserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            RoleId = "40A649CC-F41A-4505-94B6-7335F12E3A5D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Interests")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Photos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("References")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.ResumeSkill", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Skill", "Skill")
                        .WithMany("Resumes")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Interests");

                    b.Navigation("References");

                    b.Navigation("Skills");

                    b.Navigation("SocialMedias");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Navigation("Resumes");
                });
#pragma warning restore 612, 618
        }
    }
}
