// <auto-generated />
using System;
using KaganKuscu.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KaganKuscu.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240528153914_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KaganKuscu.Model.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20609285-47dd-4796-beb5-a6ba63f5c153",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4YPZWElHSvyIVjDlnXQ0yn30gyp18yuXxRiCZgDplCF6NiJVr+dAhXpyzCWBwNRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea73e879-1dc5-4ef9-84d7-8ca0d705f321",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0c5b560-c7ef-4bb6-81f3-49bf347b40f7",
                            Email = "kuscukagan@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUSCUKAGAN@GMAIL.COM",
                            NormalizedUserName = "KAGANKUSCU",
                            PasswordHash = "AQAAAAIAAYagAAAAEAUYnFSKgrX71mrTAyCvLhnicf6Fwb/eDcpsfjrwx7Bz4PW0wEjyd2O2u1wySv6VWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc0c4e82-48fc-4bba-bf56-fef6a5f3fe58",
                            TwoFactorEnabled = false,
                            UserName = "kagankuscu"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1310),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1350),
                            Description = "",
                            EndDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("1697d1ae-c108-4fda-a5cd-1458af648e9c"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İZMİT MESLEKİ VE TEKNİK ANADOLU LİSESİ",
                            ResumeId = 1,
                            Role = "Elektrik Teknisyeni",
                            StartDate = new DateTime(2012, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1360),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1360),
                            Description = "",
                            EndDate = new DateTime(2017, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("4508fd67-567c-49bc-abd5-6a3d588e7a66"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "KOCAELİ ÜNİVERSİTESİ HEREKE YÜKSEK OKULU",
                            ResumeId = 1,
                            Role = "Elektrik Teknikeri",
                            StartDate = new DateTime(2015, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1370),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1370),
                            Description = "",
                            EndDate = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("1c08ea89-da13-4940-a234-30b92089b101"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Mekatronik Mühendisi",
                            StartDate = new DateTime(2017, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1370),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1370),
                            Description = "",
                            EndDate = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("60a62392-cde3-4b78-82b4-4cfbb8a57c7d"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFYA TEKNİK ÜNİVERSİTESİ",
                            ResumeId = 1,
                            Role = "Yüksek Lisans Mekatronik Mühendisi",
                            StartDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1380),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1380),
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("2887a658-6dcc-4d39-800e-29bb3d79a021"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ACUNMEDYA AKADEMİ",
                            ResumeId = 1,
                            Role = ".Net Core Backend Developer",
                            StartDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1800),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(1810),
                            Guid = new Guid("a5c77d71-5386-4a87-b4fe-52770b320c88"),
                            IconCssClass = "map-icon map-icon-bicycling",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bisiklet",
                            ResumeId = 1
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Başarısızlıktan korkma. Başarısızlık, başarıya giden yoldaki en önemli adımdır.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2190),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2190),
                            Guid = new Guid("9fc52642-2788-4154-8203-9a9ba49fdb30"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Bilgisayarlar, bisiklete binmek gibi bir şeydir. Dengeyi bir kez yakaladınız mı, düşmeniz çok zor.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2200),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2200),
                            Guid = new Guid("74663eb7-b0c5-4ced-a17a-6bd55aa78307"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Yazılım, bir insanın zekasını en iyi şekilde yansıtan şeydir.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2200),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2200),
                            Guid = new Guid("e83e8ba6-2485-48f3-8c37-59be6b258aab"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Gelecek, bugünü nasıl geçirdiğimize bağlıdır.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2200),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2210),
                            Guid = new Guid("f20638c2-c284-477b-9017-f33ab01a5f3d"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Dünyayı değiştirmek istiyorsan, önce kendini değiştirmelisin.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2210),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2210),
                            Guid = new Guid("77282db5-432b-4f7e-b4d2-6ff4bde18ab2"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Teknolojinin kalbi insan ruhudur.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2210),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2210),
                            Guid = new Guid("d913466a-67e9-4c64-b2c0-0f3a64ecae10"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Noktaları birleştirmek ancak geriye baktığınızda mümkündür.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2220),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2220),
                            Guid = new Guid("95d28a95-6f8f-494b-a33e-15a56bf62b24"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Zamanınız sınırlı, onu başkasının hayatını yaşayarak harcamayın.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2220),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2230),
                            Guid = new Guid("99534c07-10a0-47bc-be5d-c947e5e6238b"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 9,
                            Content = "Harika işler yapmak için tutkulu olmanız gerekir.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2230),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2230),
                            Guid = new Guid("5646cbc9-9830-49c5-9617-e34071947725"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Yaratıcı olmak, başkalarının ne düşündüğünü önemsememektir.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2230),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2230),
                            Guid = new Guid("b09549bb-a317-482e-ac51-a99567dcc8ed"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Hızlı hareket et ve bir şeyler yap. Mükemmellik, eylemin sonucudur.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2240),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2240),
                            Guid = new Guid("d7fbe824-008c-426c-8c32-459b3bfda5ba"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Mark Zuckerberg"
                        },
                        new
                        {
                            Id = 12,
                            Content = "Her zaman daha iyisini yapmanin bir yolu vardir.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2240),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2240),
                            Guid = new Guid("09de37b0-bda4-4eb4-8283-67bdfc108d12"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Larry Page"
                        },
                        new
                        {
                            Id = 13,
                            Content = "Başarısızlık bir seçenek değildir. Pes edene kadar denemeye devam et.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2250),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2250),
                            Guid = new Guid("6112b62b-af95-4bed-b4f3-89195a54c1e4"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Elon Musk"
                        },
                        new
                        {
                            Id = 14,
                            Content = "Basitlik, karmaşıklığın en üst noktasıdır.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2250),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2250),
                            Guid = new Guid("51984f9b-ea51-496f-83f9-75472c146739"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Tim Cook"
                        },
                        new
                        {
                            Id = 15,
                            Content = "Teknolojinin iyilik için bir güç olduğuna inanıyorum.",
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2260),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2260),
                            Guid = new Guid("a9e22cf2-b67c-4aba-a86c-e82b386da0d9"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Satya Nadella"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "<p>Teknolojinin sunduğu sonsuz olasılıklar beni her zaman heyecanlandırmıştır. Yazılım geliştirme dünyasına adım atarak bu heyecanımı gerçeğe dönüştürme şansı yakaladım. .NET Core platformlarında backend web geliştirmeye olan ilgimi keşfettim ve bu alanlarda kendimi geliştirmeye başladım. C#, JavaScript ve MS SQL Server dillerini öğrenerek temellerimi sağlamlaştırmaya çalışıyorum.</p>\n\n                        <p>Meraklı ve araştırmacı ruhum sayesinde her gün yeni bir şeyler öğreniyor ve kendimi geliştirmeye devam ediyorum. Kod yazmak benim için sadece bir meslek değil, aynı zamanda bir tutku ve öğrenme fırsatı. Her projede kendimi geliştirmenin ve yeni bilgiler edinmenin heyecanını yaşıyorum.</p>\n\n                        <p>Problem çözme becerilerimi geliştirmeye ve analitik düşünme yeteneğimi güçlendirmeye odaklanıyorum. Karmaşık problemler karşısında yılmadan çözümler aramak ve en uygun çözümü bulmak için çabalıyorum.</p>\n\n                        <p>Ekip çalışmasına yatkın bir kişiliğe sahibim ve iletişim becerilerimi geliştirmeye önem veriyorum. Ekip arkadaşlarımla uyum içinde çalışarak ortak hedeflere ulaşmanın keyfini yaşıyorum.</p>",
                            Address = "Kocaeli/Izmit",
                            AppUserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            BirthDate = new DateTime(1996, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2640),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(2640),
                            Email = "kuscukagan@gmail.com",
                            FullName = "Kağan Kuşcu",
                            Guid = new Guid("e7641569-9643-4f2a-ad92-0451079055d3"),
                            ImagePath = "img/resume/kagankuscu.jpg",
                            Interest = "<p>Bisiklet tutkunuyum. Rüzgarı yüzümde hissederek pedallara basmak, özgürlüğün ve maceranın tadını çıkarmak benim için paha biçilemez bir deneyim. Her sürüşte yeni keşiflere yelken açıyor, doğanın güzelliklerine tanık oluyorum. Bisikletimle şehirlerin karmaşasından uzaklaşıp, sakin patikalarda huzur buluyorum. Her viraj yeni bir sürprizi, her tepe yeni bir manzarayı müjdeliyor.\n                        <br />\n                        <br />\n                        Bisikletim sadece bir ulaşım aracı değil, aynı zamanda bir yaşam tarzı. Bisiklet kullanmak bana sadece sağlık ve zindelik değil, aynı zamanda çevreye karşı sorumluluk bilinci de kazandırıyor. Bisikletimle pedal çevirdikçe dünyayı daha güzel bir yer yapmak için katkıda bulunuyorum.\n                        <br />\n                        <br />\n                        Bisiklet tutkum beni her geçen gün daha da ileriye taşıyor. Kendimi geliştirmek için sürekli yeni rotalar arıyor, daha uzun mesafeler kat etmek için antrenman yapıyorum. Bisiklet üzerinde kendimi sınırlarımı zorlarken, aynı zamanda kendimi de daha iyi tanıyorum.\n                        <br />\n                        <br />\n                        Bisikletimle çıktığım her yolculuk unutulmaz bir anıya dönüşüyor. Pedallara her basışımda yeni bir hikaye yazıyorum. Bisiklet tutkum bana sadece keyif ve huzur değil, aynı zamanda unutulmaz anılar ve deneyimler de kazandırıyor.</p>",
                            IsActive = true,
                            IsDeleted = false,
                            Phone = "(551)-0973377",
                            ResumeName = "",
                            ResumePath = "Files/Resume/kagankuscu.pdf",
                            SecondPhone = "(089)-3006776",
                            Title = ".Net Backend Developer"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.ResumeSkill", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ResumeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeSkill");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SkillId = 1,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3030),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3030),
                            Guid = new Guid("a1a9a7a5-c232-4b8c-ae81-49676d752b91"),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 2,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3040),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3040),
                            Guid = new Guid("0e219fc0-9df0-4d8d-bdd5-16546fdd8815"),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 3,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3040),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3040),
                            Guid = new Guid("f5f56cb5-b21f-49c8-96b2-cccb566604eb"),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 4,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3050),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3050),
                            Guid = new Guid("bf2251a1-7660-4f7c-b65e-08c6ffcfd91c"),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 5,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3050),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3050),
                            Guid = new Guid("2709fc93-c607-4bb3-99f6-43e7b15af89f"),
                            Id = 0,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3770),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3770),
                            Guid = new Guid("3feba83f-8119-4cec-8869-90810aae11a5"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asp.Net Core",
                            Percent = 80
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3780),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3790),
                            Guid = new Guid("1e79228b-292c-4cd4-87f9-4d47154f0ef1"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "C#",
                            Percent = 75
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3790),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3790),
                            Guid = new Guid("fc2c6eb1-38d2-4ea9-9350-7913f20c608a"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Javascript",
                            Percent = 60
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3800),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3800),
                            Guid = new Guid("c7a31588-635b-4106-a16c-a25cbba76c35"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MS SQL",
                            Percent = 72
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3800),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(3800),
                            Guid = new Guid("0f3f30b8-94e9-44a6-93cf-9027cff62733"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTML & CSS",
                            Percent = 82
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4150),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4160),
                            Guid = new Guid("2b2176fb-0293-435d-a9f9-86aaa1d0f2f6"),
                            IconCssClass = "rsicon rsicon-github",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github",
                            ResumeId = 1,
                            Url = "https://github.com/kagankuscu"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4160),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4160),
                            Guid = new Guid("8587b663-c4dd-43f8-bf0f-594ab01113c7"),
                            IconCssClass = "rsicon rsicon-linkedin",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn",
                            ResumeId = 1,
                            Url = "https://www.linkedin.com/in/kagan-kuscu/"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4170),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4170),
                            Guid = new Guid("2f472e97-76c4-4f44-9173-665f29428478"),
                            IconCssClass = "rsicon rsicon-instagram",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram",
                            ResumeId = 1,
                            Url = "https://www.instagram.com/kagan_kuscu/"
                        });
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4530),
                            DateModified = new DateTime(2024, 5, 28, 18, 39, 14, 709, DateTimeKind.Local).AddTicks(4530),
                            Description = ".Net Backend Developer",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("f865dced-08b3-4d1b-8939-807087adb243"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Deadline Bilişim",
                            ResumeId = 1,
                            Role = ".Net Backend Developer",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A34A825F-E1A6-427C-8194-0D051C22560F",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40A649CC-F41A-4505-94B6-7335F12E3A5D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            RoleId = "A34A825F-E1A6-427C-8194-0D051C22560F"
                        },
                        new
                        {
                            UserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            RoleId = "40A649CC-F41A-4505-94B6-7335F12E3A5D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Comment", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Education", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Interest", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("Interests")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Photo", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Photos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Reference", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("References")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.ResumeSkill", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.Skill", "Skill")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.SocialMedia", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("SocialMedias")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Tag", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Blog", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.WorkExperience", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.Resume", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KaganKuscu.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Interests");

                    b.Navigation("References");

                    b.Navigation("ResumesSkills");

                    b.Navigation("SocialMedias");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("KaganKuscu.Model.Models.Skill", b =>
                {
                    b.Navigation("ResumesSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
