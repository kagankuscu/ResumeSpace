// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResumeSpace.DataAccess;

#nullable disable

namespace ResumeSpace.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240831124935_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "A34A825F-E1A6-427C-8194-0D051C22560F",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "40A649CC-F41A-4505-94B6-7335F12E3A5D",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            RoleId = "A34A825F-E1A6-427C-8194-0D051C22560F"
                        },
                        new
                        {
                            UserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            RoleId = "40A649CC-F41A-4505-94B6-7335F12E3A5D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bf6215ac-ffd1-4f8b-894e-8b9ab32e66c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "295dac93-d2b7-4731-81d5-4861284c79f9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENUEgkPnUy9VFkCRTO8GGeE/VmCNmUrMAtp80C5kjwUB4ekuedZoHgXxzXNzYYMMCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bb91de5-174b-4c72-b0ba-6c0d51e6e7b7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "799d1fab-777c-4a17-9cef-d04a41157ac4",
                            Email = "kuscukagan@gmail.com",
                            EmailConfirmed = false,
                            FullName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "KUSCUKAGAN@GMAIL.COM",
                            NormalizedUserName = "KAGANKUSCU",
                            PasswordHash = "AQAAAAIAAYagAAAAEHN0vShVAC47kMLQiyW6hyD801QLGVeA9EFvSivYupJRxO0sqYAomk7z0jWcilZ/oA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63e54f55-44bc-46a6-a590-ef701b035556",
                            TwoFactorEnabled = false,
                            UserName = "kagankuscu"
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5870),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5920),
                            Description = "",
                            EndDate = new DateTime(2015, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("61ccc377-f00d-4659-8d0f-036ccc3bdca5"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "IZMIT VOCATIONAL AND TECHNICAL ANATOLIAN HIGH SCHOOL",
                            Role = "Electrical Technician",
                            StartDate = new DateTime(2012, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5950),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5950),
                            Description = "",
                            EndDate = new DateTime(2017, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("1010e9cd-2459-4376-bd62-2e216d0bc60a"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "KOCAELI UNIVERSITY HEREKE VOCATIONAL SCHOOL",
                            Role = "Electrical Engineer",
                            StartDate = new DateTime(2015, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5960),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5960),
                            Description = "",
                            EndDate = new DateTime(2021, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("dce7676a-e34f-4ff1-bd01-c2d0797310df"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFIA TECHNICAL UNIVERSITY",
                            Role = "Mechatronics Engineer",
                            StartDate = new DateTime(2017, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5960),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5960),
                            Description = "",
                            EndDate = new DateTime(2023, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("3ff70f55-7bf0-44bc-936e-c5705990e10c"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SOFIA TECHNICAL UNIVERSITY",
                            Role = "Master's in Mechatronics Engineering",
                            StartDate = new DateTime(2021, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5970),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(5970),
                            Description = "",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("f27de5a1-bdb2-4d73-b8a7-8f39543ba88f"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "ACUNMEDYA ACADEMY",
                            Role = ".Net Core Backend Developer",
                            StartDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IconCssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6460),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6460),
                            Guid = new Guid("c8e551e5-fc02-45c9-89e0-6b720128909a"),
                            IconCssClass = "map-icon map-icon-bicycling",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bicycle",
                            ResumeId = 1
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Don’t be afraid of failure. Failure is a crucial step on the road to success.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6850),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6850),
                            Guid = new Guid("a0f6ed5f-32b8-46a0-a6db-d7a173169593"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Computers are like riding a bicycle. Once you get the balance, it’s hard to fall off.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6860),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6860),
                            Guid = new Guid("1f0e1804-8657-4545-8490-6ca631d22f9a"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Software is the best reflection of a person’s intelligence.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6860),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6860),
                            Guid = new Guid("2fb62d93-0515-45a3-a06d-a8526a1684ce"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 4,
                            Content = "The future depends on how we spend today.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6870),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6870),
                            Guid = new Guid("a75eefe0-382b-477c-8358-20d3125c1428"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 5,
                            Content = "If you want to change the world, you must first change yourself.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6880),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6880),
                            Guid = new Guid("2d71b3d9-8f07-4c16-b707-9c041ec136fe"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Bill Gates"
                        },
                        new
                        {
                            Id = 6,
                            Content = "The heart of technology is the human soul.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6880),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6880),
                            Guid = new Guid("5958556e-d9a1-4efa-a82c-2b5ab45c8257"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 7,
                            Content = "You can only connect the dots looking backward.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6890),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6890),
                            Guid = new Guid("fb2640b6-f114-4e4d-a4e5-59bd5fa072af"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Your time is limited, so don’t waste it living someone else’s life.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6890),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6890),
                            Guid = new Guid("f4ff27b9-1dfb-490b-8f0a-ed0cc610aeb1"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 9,
                            Content = "To do great work, you need to be passionate.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6900),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6900),
                            Guid = new Guid("60cf7ab8-2da1-4bbf-8fc0-e2e03a8dbe46"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            Content = "Being creative means not caring about what others think.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6910),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6910),
                            Guid = new Guid("2b10af82-31eb-431b-b6f9-86e3813f9fa2"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Steve Jobs"
                        },
                        new
                        {
                            Id = 11,
                            Content = "Move fast and make things. Perfection is the result of action.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6910),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6910),
                            Guid = new Guid("edf24942-a085-41e9-9ca4-1bc1d3ab6309"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Mark Zuckerberg"
                        },
                        new
                        {
                            Id = 12,
                            Content = "There is always a way to do better.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6920),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6920),
                            Guid = new Guid("fff1aabd-3f17-49b4-b2e8-68f0c3433fcb"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Larry Page"
                        },
                        new
                        {
                            Id = 13,
                            Content = "Failure is not an option. Keep trying until you succeed.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6920),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6920),
                            Guid = new Guid("c51fb881-93e0-400a-a2b4-634858f40bdf"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Elon Musk"
                        },
                        new
                        {
                            Id = 14,
                            Content = "Simplicity is the ultimate sophistication.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6930),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6930),
                            Guid = new Guid("28fc0cb7-e7cd-4c59-9e53-fce911fdfb7e"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Tim Cook"
                        },
                        new
                        {
                            Id = 15,
                            Content = "I believe technology is a force for good.",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6940),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(6940),
                            Guid = new Guid("0c6ce12d-cf60-43ed-b355-12d67e33c643"),
                            IsActive = true,
                            IsDeleted = false,
                            Owner = "Satya Nadella"
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Resumes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "<p>The endless possibilities offered by technology have always excited me. Stepping into the world of software development has given me the chance to turn this excitement into reality. I discovered my interest in backend web development on .NET Core platforms and started to improve myself in these areas. By learning C#, JavaScript, and MS SQL Server, I am working to solidify my foundations.</p>\n\n                    <p>Thanks to my curious and research-oriented nature, I learn new things every day and continue to develop myself. Writing code is not just a profession for me but also a passion and an opportunity for learning. I experience the thrill of growing and acquiring new knowledge with every project.</p>\n\n                    <p>I focus on enhancing my problem-solving skills and strengthening my analytical thinking abilities. I strive to find solutions and seek the best possible answers when faced with complex problems.</p>\n\n                    <p>I have a personality suited to teamwork and place great importance on developing my communication skills. I enjoy working in harmony with my team members to achieve common goals.</p>",
                            Address = "Kocaeli/Izmit",
                            AppUserId = "D0C23476-68D0-4DA0-AAD4-3ADAE20702C0",
                            BirthDate = new DateTime(1996, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(7330),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(7330),
                            Email = "kuscukagan@gmail.com",
                            FullName = "Kagan Kuscu",
                            Guid = new Guid("7f531a24-84b6-4390-acec-8c2eb77994d4"),
                            ImagePath = "kagankuscu/kagankuscu.jpg",
                            Interest = "<p>I am passionate about cycling. Feeling the wind on my face as I pedal is an invaluable experience that embodies freedom and adventure. Each ride opens the door to new discoveries and allows me to witness the beauty of nature. I find tranquility away from the city’s chaos, exploring serene trails on my bike. Every turn brings a new surprise, and every hill reveals a new view.\n                    <br />\n                    <br />\n                    My bike is not just a mode of transportation; it’s a lifestyle. Cycling provides not only health and vitality but also a sense of responsibility towards the environment. By pedaling, I contribute to making the world a better place.\n                    <br />\n                    <br />\n                    My passion for cycling drives me forward each day. I am constantly seeking new routes to challenge myself and training to cover longer distances. As I push my limits on the bike, I also get to know myself better.\n                    <br />\n                    <br />\n                    Every journey I take on my bike becomes an unforgettable memory. With every pedal stroke, I write a new story. My passion for cycling brings me not only joy and peace but also unforgettable memories and experiences.</p>",
                            IsActive = true,
                            IsDeleted = false,
                            Phone = "(089)-3006776",
                            ResumeName = "KaganKuscu",
                            ResumePath = "kagankuscu/kagankuscu.pdf",
                            SecondPhone = "",
                            Title = ".Net Backend Developer"
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Percent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9680),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9680),
                            Guid = new Guid("c2cb2fe6-e801-4af2-b615-85b78f30a727"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Asp.Net Core",
                            Percent = 80
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9690),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9690),
                            Guid = new Guid("027f7cc7-0851-4387-a2c5-efe4f48b7bc3"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "C#",
                            Percent = 75
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9690),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9690),
                            Guid = new Guid("cc26a2b3-be6d-42e7-b771-842250f8c8fa"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Javascript",
                            Percent = 60
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9700),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9700),
                            Guid = new Guid("a28716ec-6ba6-420a-8c6d-24be789a394a"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "MS SQL",
                            Percent = 72
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9710),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9710),
                            Guid = new Guid("2da79711-d019-4c8c-a83f-8e78f08740f1"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "HTML & CSS",
                            Percent = 82
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9710),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 928, DateTimeKind.Local).AddTicks(9710),
                            Guid = new Guid("65ece91c-4f8d-4016-82bf-3f07be557aca"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "JQuery",
                            Percent = 75
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SocialMediaIconId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaIconId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(190),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(190),
                            Guid = new Guid("5dfd70e8-c120-4fcd-8ae1-5bb864829e99"),
                            IsActive = true,
                            IsDeleted = false,
                            SocialMediaIconId = 1,
                            Url = "https://github.com/kagankuscu"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(200),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(200),
                            Guid = new Guid("62f41be9-73de-45ce-9893-b5b929928f69"),
                            IsActive = true,
                            IsDeleted = false,
                            SocialMediaIconId = 2,
                            Url = "https://www.linkedin.com/in/kagan-kuscu/"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(200),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(210),
                            Guid = new Guid("2ff28b5c-fb25-433a-8730-6d194166b40c"),
                            IsActive = true,
                            IsDeleted = false,
                            SocialMediaIconId = 3,
                            Url = "https://www.instagram.com/kagan_kuscu/"
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.SocialMediaIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CssClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaIcons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CssClass = "rsicon rsicon-github",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(550),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(560),
                            Guid = new Guid("72add5b3-dd01-4eef-9821-ae10ba15506f"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Github"
                        },
                        new
                        {
                            Id = 2,
                            CssClass = "rsicon rsicon-linkedin",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(560),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(560),
                            Guid = new Guid("f7b342a8-55a8-4a7e-a2a4-865d903479f5"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = 3,
                            CssClass = "rsicon rsicon-instagram",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(570),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(570),
                            Guid = new Guid("f6258325-15be-4c01-b39f-c3c7d88fe35e"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Instagram"
                        },
                        new
                        {
                            Id = 4,
                            CssClass = "rsicon rsicon-facebook",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(570),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(570),
                            Guid = new Guid("767065ad-5554-4f0b-87c8-4a25a850842d"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 5,
                            CssClass = "rsicon rsicon-youtube",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(580),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(580),
                            Guid = new Guid("3c57a646-cd92-4993-854d-749d8a03e084"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Youtube"
                        },
                        new
                        {
                            Id = 6,
                            CssClass = "rsicon rsicon-twitter",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(580),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(590),
                            Guid = new Guid("ebc275a1-008b-452a-a8be-6ab96564ee6b"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "X (Twitter)"
                        },
                        new
                        {
                            Id = 7,
                            CssClass = "rsicon rsicon-slack",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(590),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(590),
                            Guid = new Guid("8741c59c-54a2-40e0-ac07-a8fc2b22bb25"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Slack"
                        },
                        new
                        {
                            Id = 8,
                            CssClass = "rsicon rsicon-reddit",
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(600),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(600),
                            Guid = new Guid("f1407bcc-bbf4-4577-b48f-116f1ea44395"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Reddit"
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WorkExperiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = new Guid("d0c23476-68d0-4da0-aad4-3adae20702c0"),
                            DateCreated = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(960),
                            DateModified = new DateTime(2024, 8, 31, 15, 49, 34, 929, DateTimeKind.Local).AddTicks(960),
                            Description = ".Net Backend Developer",
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Guid = new Guid("baaad4e7-988f-4b88-a93f-ec417c36ce4c"),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Deadline Bilişim (Deadline Information Technology)",
                            Role = ".Net Backend Developer",
                            StartDate = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumeSkill", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ResumeSkill");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SkillId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 3
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 4
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 5
                        },
                        new
                        {
                            ResumeId = 1,
                            SkillId = 6
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesEducations", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("ResumesEducations");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            EducationId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 3
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 4
                        },
                        new
                        {
                            ResumeId = 1,
                            EducationId = 5
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesReferences", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "ReferenceId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("ResumesReferences");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesSocialMedias", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("SocialMediaId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "SocialMediaId");

                    b.HasIndex("SocialMediaId");

                    b.ToTable("ResumesSocialMedias");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 1
                        },
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 2
                        },
                        new
                        {
                            ResumeId = 1,
                            SocialMediaId = 3
                        });
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesWorkExperiences", b =>
                {
                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.HasKey("ResumeId", "WorkExperienceId");

                    b.HasIndex("WorkExperienceId");

                    b.ToTable("ResumesWorkExperiences");

                    b.HasData(
                        new
                        {
                            ResumeId = 1,
                            WorkExperienceId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Blog", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany()
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Comment", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.Blog", null)
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Interest", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Resume", null)
                        .WithMany("Interests")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Photo", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Blog", null)
                        .WithMany("Photos")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Resume", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.SocialMedia", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.SocialMediaIcon", "SocialMediaIcon")
                        .WithMany()
                        .HasForeignKey("SocialMediaIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMediaIcon");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Tag", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Blog", null)
                        .WithMany("Tags")
                        .HasForeignKey("BlogId");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumeSkill", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.Skill", "Skill")
                        .WithMany("ResumesSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesEducations", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Education", "Education")
                        .WithMany("ResumesEducations")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany("ResumesEducations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesReferences", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Reference", "Reference")
                        .WithMany("ResumesReferences")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany("ResumesReferences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reference");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesSocialMedias", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany("ResumesSocialMedias")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.SocialMedia", "SocialMedia")
                        .WithMany("ResumesSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("SocialMedia");
                });

            modelBuilder.Entity("ResumeSpace.Model.Rel.ResumesWorkExperiences", b =>
                {
                    b.HasOne("ResumeSpace.Model.Models.Resume", "Resume")
                        .WithMany("ResumesWorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResumeSpace.Model.Models.WorkExperience", "WorkExperience")
                        .WithMany("ResumesWorkExperiences")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Photos");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Education", b =>
                {
                    b.Navigation("ResumesEducations");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Reference", b =>
                {
                    b.Navigation("ResumesReferences");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Resume", b =>
                {
                    b.Navigation("Interests");

                    b.Navigation("ResumesEducations");

                    b.Navigation("ResumesReferences");

                    b.Navigation("ResumesSkills");

                    b.Navigation("ResumesSocialMedias");

                    b.Navigation("ResumesWorkExperiences");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.Skill", b =>
                {
                    b.Navigation("ResumesSkills");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.SocialMedia", b =>
                {
                    b.Navigation("ResumesSocialMedias");
                });

            modelBuilder.Entity("ResumeSpace.Model.Models.WorkExperience", b =>
                {
                    b.Navigation("ResumesWorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
