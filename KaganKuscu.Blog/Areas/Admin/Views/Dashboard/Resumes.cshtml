<!-- Center Modal example -->
<div id="mdlAddAndUpdate" class="modal fade bs-example-modal-center modal-lg" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="frm" class="needs-validation">
                <div class="modal-header">
                    <h5 id="mdlTitle" class="modal-title">Person Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                        <div class="row mb-2">
                            <label for="txtResumeName">Resume Name: </label>
                            <input class="form-control" type="text" id="txtResumeName" placeholder="Please add resume name" required/>
                        </div>

                        <div class="row mb-2">
                            <label for="txtName">Fullname: </label>
                            <input class="form-control" type="text" id="txtName" placeholder="Please add fullname" required/>
                        </div>

                        <div class="row mb-2">
                            <label for="txtBirthdate">Birth Date:</label>
                            <input class="form-control input-mask" id="txtBirthdate" placeholder="Please add birth date" data-inputmask="'alias': 'datetime'" data-inputmask-inputformat="mm/dd/yyyy" im-insert="false" required/>
                        </div>

                        <div class="row mb-2">
                            <label for="txtTitle">Role :</label>
                            <input class="form-control" type="text" id="txtTitle" placeholder="Please add role" required/>
                        </div>

                        <div class="row mb-2">
                            <label for="txtEmail">Email :</label>
                            <input id="txtEmail" placeholder="Please add email" class="form-control input-mask" data-inputmask="'alias': 'email'" im-insert="true" required>
                        </div>

                        <div class="row mb-2">
                            <label for="txtAddress">Address :</label>
                            <input class="form-control" type="text" id="txtAddress" placeholder="Please add address"/>
                        </div>

                        <div class="row mb-2">
                            <label for="txtNumber">Phone :</label>
                            <input class="form-control input-mask" id="txtPhone" placeholder="Please add phone number" data-parsley-minlength="13" maxlength="13"
                            data-parsley-pattern="^\(\d{3}\)-\d{7}$" data-inputmask="'mask': '(999)-9999999'"  im-insert="true" required/>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                    <button id="btnNextModal" type="submit" onclick="nextModal()" class="btn btn-primary">
                        Next Page
                    </button>
                </div>
            </form>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Center Modal example -->
<div id="mdlAbout" class="modal fade bs-example-modal-center modal-lg" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">About Me</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">

                <div class="row mb-2">
                    <textarea class="tinymce-modal" id="txtareaAbout"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                @if (!User.IsInRole("Admin"))
                {
                    <button id="btnSave" type="button" class="btn btn-success">Save</button>
                }
                <button class="btn btn-primary" data-bs-target="#mdlAddAndUpdate" data-bs-toggle="modal">
                    Previous Page
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<!-- Extras Information modal -->
<div id="mdlExtras" class="modal fade bs-example-modal-center modal-lg" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="frmExtra" class="needs-validation">
                <div class="modal-header">
                    <h5 class="modal-title">Person Extra Information</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row mb-2">
                        <label for="txtImage" class="form-label">Please add image</label>
                        <input class="form-control" type="file" id="txtImage" accept="image/png, image/jpeg">
                    </div>

                    <div class="row mb-2">
                        <label for="txtResume" class="form-label">Please add resume</label>
                        <input class="form-control" type="file" id="txtResume" accept=".pdf">
                    </div>

                    <div class="row mb-2">
                        <label for="txtSecondPhone">Second phone number :</label>
                        <input class="form-control input-mask" id="txtSecondPhone" placeholder="Pleas add second phone number" data-parsley-minlength="13" maxlength="13"
                        data-parsley-pattern="^\(\d{3}\)-\d{7}$" data-inputmask="'mask': '(999)-9999999'"  im-insert="true"/>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                    <button id="btnNextModal" type="submit" onclick="nextExtraModal()" class="btn btn-primary">
                        Next Page
                    </button>
                </div>
            </form>
        </div>
    </div>
</div><!-- modal end-->

<!-- Center Modal example -->
<div id="mdlInterest" class="modal fade bs-example-modal-center modal-lg" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Hobby</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">

                <div class="row mb-2">
                    <textarea class="tinymce-modal" id="txtareaExtras"></textarea>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                @if(!User.IsInRole("Admin"))
                {
                    <button id="btnExtrasSave" type="button" class="btn btn-success">Save</button>
                }
                <button class="btn btn-primary" data-bs-target="#mdlExtras" data-bs-toggle="modal">
                    Previous Page
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div id="mdlAdmin" class="modal fade bs-example-modal-center modal-lg" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                </button>
            </div>
            <div class="modal-body">

                <div class="row mb-2" id="txtAdmin">
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    @if (!User.IsInRole("Admin"))
                    {
                        <div class="col-md-6">
                            <div class="mb-3">
                                <a onclick="add()" class="btn btn-success waves-effect waves-light"><i class="mdi mdi-plus me-2"></i> Add New</a>
                            </div>
                        </div>
                    }
                </div>
                <!-- end row -->
                
                <div class="row">
                    <table id="datatable" class="table table-centered table-nowrap table-hover mb-0">
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{    
    <script src="~/js/customSwalButton.js"></script>
    <script src="~/lib/tinymce/tinymce.min.js"></script>
    <script src="~/js/customTinymce.init.js"></script>
    <script>
        const isAdmin = '@User.IsInRole("Admin")' === 'True' ? true : false;
        let resume = [];
        let datatable;

        $(document).ready(() =>
        {
            fillDatatable();
        });

        async function fillDatatable()
        {
            let data = await $.ajax
            ({
                url: "/Admin/Resume/GetAll",
                type: "GET"
            });

            resume = resume.concat(data.data);

            datatable = $("#datatable").DataTable
                ({
                    paging: false,
                    pageLenght: 50,
                    data: data.data,
                    columns:
                    [
                        { data: "resumeName", title: "Resume Name" },
                        { data: "fullName", title: "Fullname" },
                        { data: "title", title: "Title" },
                        { data: "email", title: "Email" },
                        { data: "address", title: "Address" },
                        { data: "phone", title: "Phone" },
                        {
                            data: "birthDate",
                            title: "Birth Date",
                            render: (data) =>
                            {
                                return moment(data).format("DD/MM/YYYY");
                            }
                        },
                        { data: "secondPhone", title: "Second Phone" },
                        {
                            data: "guid",
                            title: "Actions",
                            visible: !isAdmin,
                            render: (guid, type, row) =>
                            {
                                return `<ul class="list-inline mb-0">
                                            <li class="list-inline-item">
                                                <a onclick="update('${guid}', this)" class="px-2 text-primary"><i class="uil uil-pen font-size-18"></i></a>
                                            </li>
                                            <li class="list-inline-item">
                                                <a onclick="remove('${guid}', this)" class="px-2 text-danger"><i class="uil uil-trash-alt font-size-18"></i></a>
                                            </li>
                                            <li class="list-inline-item dropdown">
                                                <a class="text-muted dropdown-toggle font-size-18 px-2" href="#" role="button" data-bs-toggle="dropdown" aria-haspopup="true">
                                                    <i class="uil uil-ellipsis-v"></i>
                                                </a>

                                                <div class="dropdown-menu dropdown-menu-end">
                                                    <a class="dropdown-item" onclick="toggleStatus(this)">
                                                        <i class="${row.isActive ? "uil-check-circle" : "uil-times-circle" } me-2
                                                        text-${row.isActive ? "success" : "danger" }" style="font-size: 19px"></i>${row.isActive ? "Make passive" : "Make active" }
                                                    </a>
                                                    <a class="dropdown-item" onclick="extrasInformation('${guid}', this)">Add extra information</a>
                                                </div>
                                            </li>
                                        </ul>`
                            }
                        },
                        {
                            data: 'about',
                            title: 'About',
                            visible: isAdmin,
                            render: (about, _, row) => {
                                return `
                                ${
                                 about.length >= 35 ?
                                    `${about.slice(0, 35)} ...
                                    <a onclick='showAdminInfo(${JSON.stringify(row)}, "about")' style='font-size: bold'>More</a>` :
                                    about
                                }
                                `;
                            }
                        },
                        {
                            data: 'interest',
                            title: 'Interest',
                            visible: isAdmin,
                            render: (interest, _, row) => {
                                return `
                                ${
                                 interest.length >= 35 ?
                                    `${interest.slice(0, 35)} ...
                                    <a onclick='showAdminInfo(${JSON.stringify(row)}, "interest")' style='font-size: bold'>More</a>` :
                                    interest
                                }
                                `;
                            }
                        },
                        {
                            data: "isActive",
                            title: "Activity State",
                            render: (data) => `<i style="font-size: 25px" class="${data ? "uil-check-circle text-success" : "uil-times-circle text-danger"}"></i>`
                        },
                    ],
                    columnDefs:
                    [
                        {
                            targets: 8,
                            visible: true,
                            className: "text-center",
                            width: "5px"
                        },
                        {
                            targets: 7,
                            width: "5px"
                        }
                    ],
                });
        }

        function add()
        {
            toggleModal();
            clearModal();

            $("#btnSave").off().text("Save").removeClass("btn-warning").addClass("btn-success").click(() =>
            {
                SwalToast.fire
                ({
                    icon: "success",
                    title: "Saved"
                });

                let data =
                {
                    resumeName: $("#txtResumeName").val(),
                    fullName: $("#txtName").val(),
                    title: $("#txtTitle").val(),
                    phone: $("#txtPhone").val(),
                    address: $("#txtAddress").val(),
                    email: $("#txtEmail").val(),
                    birthDate: $("#txtBirthdate").val(),
                    about: tinymce.get("txtareaAbout").getContent(),
                }

                $.ajax(
                    {
                        url: "/Admin/Resume/Add",
                        contentType: "application/json",
                        type: "POST",
                        data: JSON.stringify(data),
                        success: (res) =>
                        {
                            updateAllRow();
                            datatable.row.add(res).draw();

                            data["guid"] = res;
                            resume.push(data);

                            toggleModal();
                        }
                    }
                );
            });
        }

        function updateAllRow(guid)
        {
            for (let x of $("tbody tr"))
            {
                // Get the data
                let data = datatable.row(x).data();

                if (guid === data.guid)
                    continue;

                // change to isActive false
                data.isActive = false;
                // update datatable data
                datatable.row(x).data(data).draw();
            }
        }

        function toggleStatus(element)
        {
            let row = $(element).parents("tr");
            let data = datatable.row(row).data();

            $.ajax(
                {
                    url: "/Admin/Resume/ToggleStatus",
                    type: "POST",
                    data: { guid: data.guid },
                    success: () =>
                    {
                        SwalToast.fire(
                            {
                                icon: "success",
                                title: !data.isActive ? "Activated" : "Deactivated"
                            });

                        data.isActive = !data.isActive;
                        datatable.row(row).data(data).draw();

                        updateAllRow(data.guid);
                    },
                    error: (err) =>
                    {
                        SwalToast.fire
                            ({
                                icon: "error",
                                title: "Something went wrong" + err.responseText
                            });
                    }
                }
            )
        }

        function remove(guid, element)
        {
            SwalRemove
                .fire()
                .then(result =>
                {
                    if(result.isConfirmed)
                    {
                        $.ajax
                        ({
                            url: "/Admin/Resume/Remove",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(guid) ,
                            success: res =>
                            {
                                datatable.row($(element).parents("tr")).remove().draw();

                                SwalToast.fire
                                ({
                                    icon: "success",
                                    title: "Deleted"
                                });

                            },
                            error: (err) =>
                            {
                                SwalToast.fire
                                ({
                                    icon: "error",
                                    title: "error: " + err.responseText
                                });
                            }
                        })
                    }
                });
        }

        function update(guid, element)
        {
            toggleModal();
            clearModal();

            let row = $(element).parents("tr");
            let oldData = datatable.row(row).data();

            $("#txtResumeName").val(oldData.resumeName);
            $("#txtName").val(oldData.fullName);
            $("#txtTitle").val(oldData.title);
            $("#txtPhone").val(oldData.phone);
            $("#txtBirthdate").val(moment(oldData.birthDate).format("DD/MM/YYYY"))
            $("#txtAddress").val(oldData.address);
            $("#txtEmail").val(oldData.email);
            tinymce.get("txtareaAbout").setContent(oldData.about === null ? "" : oldData.about);

            $("#btnSave").off().text("Update").removeClass("btn-success").addClass("btn-warning").click(() =>
            {
                SwalSave
                    .fire()
                    .then(result =>
                    {
                        if(result.isConfirmed)
                        {
                            let data =
                            {
                                guid: guid,
                                resumeName: $("#txtResumeName").val(),
                                fullName: $("#txtName").val(),
                                title: $("#txtTitle").val(),
                                phone: $("#txtPhone").val(),
                                address: $("#txtAddress").val(),
                                email: $("#txtEmail").val(),
                                birthDate: $("#txtBirthdate").val(),
                                about: tinymce.get("txtareaAbout").getContent(),
                                isActive: datatable.row(row).data().isActive,
                            }

                            $.ajax(
                            {
                                url: "/Admin/Resume/Update",
                                type: "POST",
                                contentType: "application/json",
                                data: JSON.stringify(data),
                                success: (res) =>
                                {
                                    toggleModal();
                                    datatable.row(row).data(res).draw();
                                    SwalToast.fire(
                                        {
                                            icon: "success",
                                            title: "Updated"
                                        }
                                    );
                                }
                            });
                        }
                    });
            });
        }

        function clearModal()
        {
            $("#mdlAddAndUpdate input").val("");
            tinymce.get("txtareaAbout").setContent("");
            tinymce.get("txtareaExtras").setContent("");
            $("#mdlExtras input").val('');

            resetFormValidate();
        }

        function resetFormValidate()
        {
          $("#frm").parsley().reset();
          $("#frm").removeClass("was-validated");
        }

        function toggleModal()
        {
            let firstModal = $("#mdlAddAndUpdate").hasClass('show');
            let secondModal = $("#mdlAbout").hasClass('show');

            if (firstModal || secondModal)
            {
                $("#mdlAddAndUpdate").modal("hide");
                $("#mdlAbout").modal("hide");
            }
            else if (!firstModal)
                $("#mdlAddAndUpdate").modal("show");
            else if (!secondModal)
                $("#mdlAbout").modal("show");
        }

        function nextModal()
        {
            event.preventDefault();
            if ($("#frm").parsley().isValid() === false)
            {
                $('#frm').parsley().validate();
                $("#frm").addClass("was-validated");
            }
            else
            {
                $("#mdlAddAndUpdate").modal("hide");
                $("#mdlAbout").modal("show");
            }
        }

        function extrasInformation(guid, element)
        {
            toggleModalExtras();
            clearModal();

            let resumeIndex = resume.findIndex(p => p.guid === guid);
            $("#txtSecondPhone").val(resume[resumeIndex].secondPhone);
            tinymce.get("txtareaExtras").setContent(resume[resumeIndex].interest ?? "");

            $("#btnExtrasSave").off().click(() => addExtrasInformation(guid, element));
        }
        
        function addExtrasInformation(guid, element)
        {
            let formData = new FormData();

            formData.append("image", $("#txtImage").prop("files")[0]);
            formData.append("resume", $("#txtResume").prop("files")[0]);
            formData.append("secondPhone", $("#txtSecondPhone").val());
            formData.append("interest", tinymce.get("txtareaExtras").getContent());
            formData.append("guid", guid);

            let resumeIndex = resume.findIndex(p => p.guid === guid);
            resume[resumeIndex].secondPhone = $("#txtSecondPhone").val();
            resume[resumeIndex].interest = tinymce.get("txtareaExtras").getContent();

            let row = $(element).parents("tr");

            $.ajax
            ({
                url: "/Admin/Resume/UploadFiles",
                type: "POST",
                processData: false,
                contentType: false,
                data: formData,
                success: (res) =>
                {
                    toggleModalExtras();
                    datatable.row(row).data(res).draw();
                    SwalToast.fire
                    ({
                        icon: "success",
                        title: "Saved"
                    });
                },
                error: (err) =>
                {
                    SwalToast.fire
                    ({
                        icon: "error",
                        title: err.responseText === '' ? "Something went wrong!" : err.responseText
                    })
                }
            });
        }

        function toggleModalExtras()
        {
            let extrasModal = $("#mdlExtras").hasClass('show');
            let interestModal = $("#mdlInterest").hasClass('show');

            if (extrasModal || interestModal)
            {
                $("#mdlExtras").modal("hide");
                $("#mdlInterest").modal("hide");
            }
            else if (!extrasModal)
                $("#mdlExtras").modal("show");
            else if (!interestModal)
                $("#mdlInterest").modal("show");
        }

        function nextExtraModal()
        {
            event.preventDefault();
            if ($("#frmExtra").parsley().isValid() === false)
            {
                $('#frmExtra').parsley().validate();
                $("#frmExtra").addClass("was-validated");
            }
            else
            {
                $("#mdlExtras").modal("hide");
                $("#mdlInterest").modal("show");
            }
        }

        function showAdminInfo(data, title) {
            $('#mdlAdmin').modal('show');
            $('.modal-title').text(title.substring(0, 1).toUpperCase() + title.substring(1).toLowerCase());
            $('#txtAdmin').html('');

            if (title === 'about') {
                $('#txtAdmin').html(data.about);
            } else {
                $('#txtAdmin').html(data.interest);
            }
        }

    </script>
}
